Checking for Duplicates

SELECT customer_ID, COUNT(*)
FROM customers
GROUP BY customer_ID
HAVING COUNT(*) > 1;

SELECT email, COUNT(*)
FROM customers
GROUP BY email
HAVING COUNT(*) > 1;




checking for invalid format

-- Checking invalid emails
SELECT * 
FROM customers 
WHERE email NOT LIKE '%@%.%' OR email NOT LIKE '%@%';

-- Checking invalid phone numbers (simple format validation, adjust the pattern as needed)
SELECT * 
FROM customers
WHERE Phone NOT LIKE '%[0-9]%';

-- Checking for invalid date_of_birth (future dates or incorrect date formats)
SELECT * 
FROM customers
WHERE date_of_birth > CURRENT_DATE;





Handling Duplicate (Delete)

DELETE FROM customers
WHERE customer_ID NOT IN (
    SELECT MIN(customer_ID)
    FROM customers
    GROUP BY email
);





2.2 Handling Missing Data
To handle missing data, you can either update rows with default values (e.g., 'Unknown' for missing email or Phone) or delete the rows if necessary.

sql
Copy
Edit
-- Fill missing email with 'Unknown'
UPDATE customers
SET email = 'Unknown'
WHERE email IS NULL;

-- Fill missing phone with 'Unknown'
UPDATE customers
SET Phone = 'Unknown'
WHERE Phone IS NULL;







2.3 Correcting Invalid Data Formats
To correct invalid data (e.g., fixing account balances or removing invalid phone numbers):

sql
Copy
Edit
-- Set invalid account balances (negative balances) to 0
UPDATE customers
SET Account_Balance = 0
WHERE Account_Balance < 0;

-- Set invalid emails to 'Unknown'
UPDATE customers
SET email = 'Unknown'
WHERE email NOT LIKE '%@%.%' OR email NOT LIKE '%@%';

-- Set invalid phone numbers to 'Unknown'
UPDATE customers
SET Phone = 'Unknown'
WHERE Phone NOT LIKE '%[0-9]%';
2.4 Handling Invalid Dates
Fixing future dates in the date_of_birth column (for customers who are above 18 years old):

sql
Copy
Edit
-- Setting invalid date_of_birth (future dates) to NULL
UPDATE customers
SET date_of_birth = NULL
WHERE date_of_birth > CURRENT_DATE;





Validation checks can be carried out to ensure that the data meets certain standards. For example, we want to check:

The uniqueness of customer_ID and email.

The format of email, Phone, and date_of_birth.

The validity of the Account_Balance (it should be positive).





3.1 Checking for Duplicate customer_ID and email
sql
Copy
Edit
-- Duplicate Customer IDs
SELECT customer_ID, COUNT(*)
FROM customers
GROUP BY customer_ID
HAVING COUNT(*) > 1;





-- Duplicate Emails
SELECT email, COUNT(*)
FROM customers
GROUP BY email
HAVING COUNT(*) > 1;
3.2 Checking for Valid Email Format
sql
Copy
Edit
SELECT * 
FROM customers
WHERE email NOT LIKE '%@%.%' OR email NOT LIKE '%@%';






3.3 Checking for Valid Phone Numbers
sql
Copy
Edit
SELECT * 
FROM customers
WHERE Phone NOT LIKE '%[0-9]%';
3.4 Checking for Valid Account Balance
sql
Copy
Edit
SELECT * 
FROM customers
WHERE Account_Balance < 0;




3.5 Ensuring Customers are at Least 18 Years Old
We need to ensure that the date_of_birth is not in the future and that customers are at least 18 years old:

sql
Copy
Edit
SELECT *
FROM customers
WHERE date_of_birth > CURRENT_DATE - INTERVAL 18 YEAR;


Step 4: Data Monitoring (SQL)
To set up data monitoring, you can create triggers to automatically monitor certain quality checks on insert/update operations, or you can periodically run data quality checks and store the results.

4.1 Creating a Trigger to Check for Invalid Emails
You can create a trigger to ensure no invalid emails are inserted into the table:

sql
Copy
Edit
CREATE TRIGGER check_invalid_email
BEFORE INSERT ON customers
FOR EACH ROW
BEGIN
    -- Check if the email is valid
    IF NEW.email NOT LIKE '%@%.%' OR NEW.email NOT LIKE '%@%' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid email format';
    END IF;
END;
4.2 Creating a Trigger to Ensure No Negative Account Balance
Similarly, you can create a trigger to ensure that no customer has a negative account balance:

sql
Copy
Edit
CREATE TRIGGER check_negative_balance
BEFORE INSERT ON customers
FOR EACH ROW
BEGIN
    -- Check if the account balance is negative
    IF NEW.Account_Balance < 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Account balance cannot be negative';
    END IF;
END;



